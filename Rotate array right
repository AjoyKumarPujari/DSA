Rotate array right

nums[]=[ 1, 2, 3, 4, 5, 6, 7] k= 3
index    0  1  2  3  4  5  6

k=1 =>[ 7, 1, 2, 3, 4, 5, 6]
index   0  1  2  3  4  5  6

k=2 =>[ 6, 7, 1, 2, 3, 4, 5]
index   0  1  2  3  4  5  6

k=3 =>[ 5, 6, 7, 1, 2, 3, 4]  -> o/p
index   0  1  2  3  4  5  6

I/P =  1, 2, 3, 4, 5, 6, 7
O/P =  5, 6, 7, 1, 2, 3, 4

optimal =>
reverse the complete array [ 7, 6, 5, 4, 3, 2, 1 ]  reverse(0, n-1)
reverse the k-1 element array [5, 6, 7, 4, 3, 2, 1 ] reverse(0, k-1)
reverse the k and n element array [5, 6, 7, 1, 2, 3, 4 ]  reverse(k , n-1)


void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        k%=n;
        reverse(nums.begin(),nums.end());
        reverse(nums.begin(),nums.begin()+k);
        reverse(nums.begin()+k,nums.end());
}
