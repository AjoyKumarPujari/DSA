1. Check if array is empty

2. If yes, return 0 because there's no sequence.
if(n==0) return 0;
3. Put all numbers into a set
unordered_set<int> st;
        for(int i=0; i<n; i++){
            st.insert(a[i]);
        }
4. This removes duplicates and makes checking if a number exists very fast.

5. Loop through each number in the set

6. For each number, check if it's the start of a sequence by seeing if the number before it (num - 1) is not in the set.

7. If itâ€™s the start of a sequence

8. Count how long the sequence goes (i.e., num + 1, num + 2, ... keep going until it stops).

9. Keep track of the longest sequence found so far

10. After checking all numbers, return the longest length



class Solution {
public:
    int longestConsecutive(vector<int>& a) {
        int n=a.size();
        if(n==0) return 0;
        int longest = 1;
        unordered_set<int> st;
        for(int i=0; i<n; i++){
            st.insert(a[i]);
        }
        for (auto it : st){
            if(st.find(it -1) == st.end()){
                int cnt =1;
                int x=it;
                while(st.find(x+1) != st.end()){
                    x = x+1;
                    cnt = cnt+1;
                }
                longest = max(longest, cnt);
            }
        }
        return longest;
        
    }
};
